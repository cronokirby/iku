use std::collections::HashMap;
use crate::ast::*;

/// Represents the type of error generated by the type checker
pub struct Error {
    message: String
}

/// The type of result we use in the type checker
pub type Result<T> = Result<T, Error>;


/// Represents the basic types that exist
///
/// At the moment, this only includes premium types.
pub enum Type {
    /// Represents the primitive 64 bit signed integer type
    I64,
    /// Represents the primitive string type
    Str,
    /// Represents the primitive boolean type
    Bool,
    /// Represents a tuple type
    Tuple(Vec<Type>),
}

/// Represents the type of a function.
///
/// Functions accept a certain number of arguments, of certain types,
/// and a return value
pub struct FunctionType {
    /// The type and number of the arguments
    pub args: Vec<Type>,
    /// The type of the return value
    pub ret: Vec<Type>
}

/// This is the result of checking a program
pub struct Typings {
    /// A map from function declarations to their corresponding types
    pub functions: HashMap<String, FunctionType>
}

/// Type check an AST, and get the result of typing it
fn check(ast: Ast) -> Result<Typings> {
    unimplemented!()
}
