use crate::ast::*;
use crate::lexer;

grammar;

pub AST: AST = {
  "func" name "(" ")" "{" <Exprs> "}" => AST::FuncMain(<>)
};

Exprs: Vec<Expr> = {
  <(<Expr> ";")*>
}

Expr: Expr = {
  <value:name> "(" <e:Expr> ")" => Expr::Call(value, Box::new(e)),
  <value:int> => Expr::I32(value),
  <value:string> => Expr::Str(value),
};

extern {
  type Location = lexer::Location;
  type Error = lexer::LexError;

  enum lexer::Token {
    "{" => lexer::Token::OpenBrace,
    "}" => lexer::Token::CloseBrace,
    "(" => lexer::Token::OpenParens,
    ")" => lexer::Token::CloseParens,
    ";" => lexer::Token::Semicolon,
    "func" => lexer::Token::Func,
    name => lexer::Token::Name { value: <String> },
    int => lexer::Token::IntLitteral { value: <i32> },
    string => lexer::Token::StringLitteral { value: <String> }
  }
}