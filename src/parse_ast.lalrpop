use std::str::FromStr;
use crate::ast::*;
use crate::lexer;

grammar;

pub AST: AST = {
  "func" name "(" ")" "{" <Expr> "}" => AST::FuncMain(<>)
};

Expr: Expr = {
  name "(" <Expr> ")" => Expr::Print(Box::new(<>)),
  <value:int> => Expr::I32(value),
};

extern {
  type Location = lexer::Location;
  type Error = lexer::LexError;

  enum lexer::Token {
    "{" => lexer::Token::OpenBrace,
    "}" => lexer::Token::CloseBrace,
    "(" => lexer::Token::OpenParens,
    ")" => lexer::Token::CloseParens,
    "func" => lexer::Token::Func,
    name => lexer::Token::Name { value: <String> },
    int => lexer::Token::IntLitteral { value: <i32> },
  }
}